diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/SUAppcastItem.h Sparkle_/Extras/Source Code/SUAppcastItem.h
--- Sparkle/Extras/Source Code/SUAppcastItem.h	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/SUAppcastItem.h	2015-10-21 13:54:56.000000000 -0400
@@ -18,6 +18,12 @@
 	
 	NSString *DSASignature;	
 	NSString *minimumSystemVersion;
+	NSString *maximumSystemVersion;
+	NSString *minimumAppVersion;
+	NSString *maximumAppVersion;
+	NSString *allowedProcessorTypes;
+	NSString *allowedProcessorWordSizes;
+	NSString *tunnelblickTests;
 	
 	NSURL *fileURL;
 	NSString *versionString;
@@ -38,6 +44,12 @@
 - (NSURL *)fileURL;
 - (NSString *)DSASignature;
 - (NSString *)minimumSystemVersion;
+- (NSString *)maximumSystemVersion;
+- (NSString *)minimumAppVersion;
+- (NSString *)maximumAppVersion;
+- (NSString *)allowedProcessorTypes;
+- (NSString *)allowedProcessorWordSizes;
+- (NSString *)tunnelblickTests;
 
 // Returns the dictionary provided in initWithDictionary; this might be useful later for extensions.
 - (NSDictionary *)propertiesDictionary;
diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/SUAppcastItem.m Sparkle_/Extras/Source Code/SUAppcastItem.m
--- Sparkle/Extras/Source Code/SUAppcastItem.m	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/SUAppcastItem.m	2015-10-21 13:54:56.000000000 -0400
@@ -101,6 +101,54 @@
 	minimumSystemVersion = [systemVersionString copy];
 }
 
+- (NSString *)maximumSystemVersion { return [[maximumSystemVersion retain] autorelease]; }
+- (void)setMaximumSystemVersion:(NSString *)systemVersionString
+{
+	if (maximumSystemVersion == systemVersionString) return;
+	[maximumSystemVersion release];
+	maximumSystemVersion = [systemVersionString copy];
+}
+
+- (NSString *)minimumAppVersion { return [[minimumAppVersion retain] autorelease]; }
+- (void)setMinimumAppVersion:(NSString *)appVersionString
+{
+	if (minimumAppVersion == appVersionString) return;
+	[minimumAppVersion release];
+	minimumAppVersion = [appVersionString copy];
+}
+
+- (NSString *)maximumAppVersion { return [[maximumAppVersion retain] autorelease]; }
+- (void)setMaximumAppVersion:(NSString *)appVersionString
+{
+	if (maximumAppVersion == appVersionString) return;
+	[maximumAppVersion release];
+	maximumAppVersion = [appVersionString copy];
+}
+
+- (NSString *)allowedProcessorTypes { return [[allowedProcessorTypes retain] autorelease]; }
+- (void)setAllowedProcessorTypes:(NSString *)processorTypesString
+{
+	if (allowedProcessorTypes == processorTypesString) return;
+	[allowedProcessorTypes release];
+	allowedProcessorTypes = [processorTypesString copy];
+}
+
+- (NSString *)allowedProcessorWordSizes { return [[allowedProcessorWordSizes retain] autorelease]; }
+- (void)setAllowedProcessorWordSizes:(NSString *)processorWordSizesString
+{
+	if (allowedProcessorWordSizes == processorWordSizesString) return;
+	[allowedProcessorWordSizes release];
+	allowedProcessorWordSizes = [processorWordSizesString copy];
+}
+
+- (NSString *)tunnelblickTests { return [[tunnelblickTests retain] autorelease]; }
+- (void)setTunnelblickTests:(NSString *)tunnelblickTestsString
+{
+	if (tunnelblickTests == tunnelblickTestsString) return;
+	[tunnelblickTests release];
+	tunnelblickTests = [tunnelblickTestsString copy];
+}
+
 - initWithDictionary:(NSDictionary *)dict
 {
 	self = [super init];
@@ -141,8 +189,14 @@
             [self setFileURL:[NSURL URLWithString:[[enclosure objectForKey:@"url"] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]];
             [self setDSASignature:[enclosure objectForKey:@"sparkle:dsaSignature"]];		
             
-            [self setVersionString:newVersion];
-            [self setMinimumSystemVersion:[dict objectForKey:@"sparkle:minimumSystemVersion"]];
+            [self setVersionString:            newVersion];
+            [self setMinimumSystemVersion:     [dict objectForKey:@"sparkle:minimumSystemVersion"]];
+            [self setMaximumSystemVersion:     [dict objectForKey:@"sparkle:maximumSystemVersion"]];
+            [self setMinimumAppVersion:        [dict objectForKey:@"sparkle:minimumAppVersion"]];
+            [self setMaximumAppVersion:        [dict objectForKey:@"sparkle:maximumAppVersion"]];
+            [self setAllowedProcessorTypes:    [dict objectForKey:@"sparkle:allowedProcessorTypes"]];
+            [self setAllowedProcessorWordSizes:[dict objectForKey:@"sparkle:allowedProcessorWordSizes"]];
+            [self setTunnelblickTests:         [dict objectForKey:@"sparkle:tunnelblickTests"]];
             
             NSString *shortVersionString = [enclosure objectForKey:@"sparkle:shortVersionString"];
             if (shortVersionString)
Only in Sparkle_/Extras/Source Code: SUBasicUpdateDriver B4 patches.h
diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/SUBasicUpdateDriver.m Sparkle_/Extras/Source Code/SUBasicUpdateDriver.m
--- Sparkle/Extras/Source Code/SUBasicUpdateDriver.m	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/SUBasicUpdateDriver.m	2015-10-21 15:26:00.000000000 -0400
@@ -32,7 +32,7 @@
 	[appcast setDelegate:self];
 	NSString *userAgent = [NSString stringWithFormat: @"%@/%@ Sparkle/%@", [aHost name], [aHost displayVersion], ([SPARKLE_BUNDLE objectForInfoDictionaryKey:@"CFBundleVersion"] ?: nil)];
 	NSData * cleanedAgent = [userAgent dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
-	userAgent = [NSString stringWithCString:[cleanedAgent bytes] length:[cleanedAgent length]];
+	userAgent = [[[NSString alloc] initWithData: cleanedAgent encoding: NSASCIIStringEncoding] autorelease];
 	[appcast setUserAgentString:userAgent];
 	[appcast fetchAppcastFromURL:URL];
 }
@@ -57,10 +57,208 @@
 	return [[self _versionComparator] compareVersion:[host version] toVersion:[ui versionString]] == NSOrderedAscending;
 }
 
+- (BOOL)tunnelblickTestPrivateOnlyHasTblks
+{
+    NSString * privatePath = [[[[NSHomeDirectory()
+                                 stringByAppendingPathComponent: @"Library"]
+                                stringByAppendingPathComponent: @"Application Support"]
+                               stringByAppendingPathComponent: @"Tunnelblick"]
+                              stringByAppendingPathComponent: @"Configurations"];
+    NSDirectoryEnumerator * dirEnum = [[NSFileManager defaultManager] enumeratorAtPath: privatePath];
+    NSString * file;
+    while (  (file = [dirEnum nextObject])  )
+	{
+        if (  [[file pathExtension] isEqualToString: @"tblk"]  )
+		{
+            [dirEnum skipDescendents];
+        } else {
+            if (   [[file pathExtension] isEqualToString: @"ovpn"]
+                || [[file pathExtension] isEqualToString: @"conf"]  )
+			{
+                return NO;
+            }
+        }
+    }
+    
+    return YES;
+}
+
+- (BOOL)tunnelblickTestAppInApplications
+{
+    NSString * appPath = [[NSBundle mainBundle] bundlePath];
+    return [[appPath stringByDeletingLastPathComponent] isEqualToString: @"/Applications"];
+}
+
+- (BOOL)tunnelblickTestDeployed
+{
+    // Returns TRUE if Deploy folder exists and contains something
+    
+    NSString * resourcesPath = [[[[NSBundle mainBundle] bundlePath] stringByAppendingPathComponent: @"Contents"] stringByAppendingPathComponent: @"Resources"];
+    NSString * deployPath = [resourcesPath stringByAppendingPathComponent: @"Deploy"];
+    NSDirectoryEnumerator * dirEnum = [[NSFileManager defaultManager] enumeratorAtPath: deployPath];
+    NSString * file;
+    BOOL haveSomethingInDeployFolder = FALSE;
+    while (  (file = [dirEnum nextObject])  )
+	{
+        if (  ! [file hasPrefix: @"."]  )		// Ignore .DS_Store, .svn, etc.
+		{
+            haveSomethingInDeployFolder = TRUE;
+            break;
+        }
+    }
+    
+    return haveSomethingInDeployFolder;
+}
+
+- (BOOL)tunnelblickTestHasDeployBackups
+{
+    // Returns TRUE if no Deploy backup folder
+    
+    NSString * deployBackupsPath = @"/Library/Application Support/Tunnelblick/Backup";
+	BOOL isDir;
+	if (  [[NSFileManager defaultManager] fileExistsAtPath: deployBackupsPath isDirectory: &isDir]  ) {
+		return YES;
+	}
+	
+	return NO;
+}
+
+- (BOOL)tunnelblickDoTests: (NSString *)testTypeString
+{
+	if (  [testTypeString rangeOfString: @"privateOnlyHasTblks"].length != 0  )
+	{
+		if (  ! [self tunnelblickTestPrivateOnlyHasTblks]  )
+		{
+			return NO;
+		}
+	}
+	
+	if (  [testTypeString rangeOfString: @"privateHasOvpnOrConf"].length != 0  )
+	{
+		if (  [self tunnelblickTestPrivateOnlyHasTblks]  )
+		{
+			return NO;
+		}
+	}
+	
+	if (  [testTypeString rangeOfString: @"appInApplications"].length != 0  )
+	{
+		if (  ! [self tunnelblickTestAppInApplications]  )
+		{
+			return NO;
+		}
+	}
+	
+	if (  [testTypeString rangeOfString: @"appNotInApplications"].length != 0  )
+	{
+		if (  [self tunnelblickTestAppInApplications]  )
+		{
+			return NO;
+		}
+	}
+	
+	if (  [testTypeString rangeOfString: @"isDeployed"].length != 0  ) {
+		if (  ! [self tunnelblickTestDeployed]  )
+		{
+			return NO;
+		}
+	}
+    
+	if (  [testTypeString rangeOfString: @"isNotDeployed"].length != 0  ) {
+		if (  [self tunnelblickTestDeployed]  )
+		{
+			return NO;
+		}
+	}
+    
+	if (  [testTypeString rangeOfString: @"hasDeployBackups"].length != 0  ) {
+		if (  ! [self tunnelblickTestHasDeployBackups]  )
+		{
+			return NO;
+		}
+	}
+    
+	if (  [testTypeString rangeOfString: @"doesNotHaveDeployBackups"].length != 0  ) {
+		if (  [self tunnelblickTestHasDeployBackups]  )
+		{
+			return NO;
+		}
+	}
+    
+    return YES;
+}
+
 - (BOOL)hostSupportsItem:(SUAppcastItem *)ui
 {
-	if ([ui minimumSystemVersion] == nil || [[ui minimumSystemVersion] isEqualToString:@""]) { return YES; }
-	return [[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumSystemVersion] toVersion:[SUHost systemVersionString]] != NSOrderedDescending;
+    NSString * thisItemDescription = [ui itemDescription];
+    if (  thisItemDescription  ) {
+        thisItemDescription = [NSString stringWithFormat:@" %@", thisItemDescription];
+    } else {
+        thisItemDescription = @"";
+    }
+    
+	if ([ui minimumSystemVersion] && ( ! [[ui minimumSystemVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumSystemVersion] toVersion:[SUHost systemVersionString]] == NSOrderedDescending)
+        {
+            return NO;
+	}
+    }
+    
+	if ([ui maximumSystemVersion] && ( ! [[ui maximumSystemVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui maximumSystemVersion] toVersion:[SUHost systemVersionString]] == NSOrderedAscending)
+        {
+            return NO;
+        }
+    }
+    
+	if ([ui minimumAppVersion] && ( ! [[ui minimumAppVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui minimumAppVersion] toVersion:[host version]] == NSOrderedDescending)
+        {
+            return NO;
+	}
+        
+    }
+    
+	if ([ui maximumAppVersion] && ( ! [[ui maximumAppVersion] isEqualToString:@""]) )
+    {
+        if ([[SUStandardVersionComparator defaultComparator] compareVersion:[ui maximumAppVersion] toVersion:[host version]] == NSOrderedAscending)
+        {
+            return NO;
+        }
+    }
+    
+	if ([ui allowedProcessorTypes] && ( ! [[ui allowedProcessorTypes] isEqualToString:@""]) )
+    {
+        if ([[NSString stringWithFormat: @"%@ ", [ui allowedProcessorTypes]]
+             rangeOfString: [NSString stringWithFormat: @"%@ ", [SUHost processorTypeString]]].length == 0)
+        {
+            return NO;
+        }
+    }
+    
+	if ([ui allowedProcessorWordSizes] && ( ! [[ui allowedProcessorWordSizes] isEqualToString:@""]) )
+    {
+        if ([[NSString stringWithFormat: @"%@ ", [ui allowedProcessorWordSizes]]
+             rangeOfString: [NSString stringWithFormat: @"%@ ", [SUHost processorWordSizeString]]].length == 0)
+        {
+            return NO;
+        }
+    }
+    
+    
+	if ([ui tunnelblickTests] && ( ! [[ui tunnelblickTests] isEqualToString:@""]) )
+    {
+        if (  ! [self tunnelblickDoTests: [ui tunnelblickTests]]  )
+		{
+			return NO;
+		}
+	}
+
+	
+	return YES;
 }
 
 - (BOOL)itemContainsSkippedVersion:(SUAppcastItem *)ui
diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/SUHost.h Sparkle_/Extras/Source Code/SUHost.h
--- Sparkle/Extras/Source Code/SUHost.h	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/SUHost.h	2015-10-21 13:54:56.000000000 -0400
@@ -13,6 +13,8 @@
 }
 
 + (NSString *)systemVersionString;
++ (NSString *)processorTypeString;
++ (NSString *)processorWordSizeString;
 
 - (id)initWithBundle:(NSBundle *)aBundle;
 - (NSBundle *)bundle;
diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/SUHost.m Sparkle_/Extras/Source Code/SUHost.m
--- Sparkle/Extras/Source Code/SUHost.m	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/SUHost.m	2015-10-21 13:54:56.000000000 -0400
@@ -8,7 +8,8 @@
 #import "SUHost.h"
 
 #import "SUSystemProfiler.h"
-#import <sys/mount.h> // For statfs for isRunningOnReadOnlyVolume
+#import <sys/mount.h>  // For statfs for isRunningOnReadOnlyVolume
+#import <sys/sysctl.h> // For sysctlbyname for processorWordSizeString
 
 @implementation SUHost
 
@@ -111,7 +112,7 @@
 	// More likely, we've got a reference to a Resources file by filename:
 	NSString *keyFilename = [self objectForInfoDictionaryKey:SUPublicDSAKeyFileKey];
 	if (!keyFilename) { return nil; }
-	return [NSString stringWithContentsOfFile:[bundle pathForResource:keyFilename ofType:nil]];
+	return [NSString stringWithContentsOfFile:[bundle pathForResource:keyFilename ofType:nil] encoding:NSASCIIStringEncoding error:nil];
 }
 
 - (NSArray *)systemProfile
@@ -222,4 +223,33 @@
 	return verStr;
 }
 
++ (NSString *)processorTypeString
+{
+#if defined __i386__ || defined __x86_64__
+    return @"Intel";
+#elif defined __ppc__ || defined __ppc64__
+    return @"PPC";
+#elif defined __arm__
+    return @"ARM";
+#else
+    return @"Unknown";
+#endif
+}
+
++ (NSString *)processorWordSizeString
+{
+    // (We don't use code similar to that in processorTypeString because we may be running a 64-bit processor in 32-bit mode.)
+    // The following code has been adapted from systemProfileArrayForHost:
+	int error = 0 ;
+	int value = 0 ;
+	unsigned long length = sizeof(value) ;
+
+    error = sysctlbyname("hw.cpu64bit_capable", &value, &length, NULL, 0);
+	if(error != 0)
+		error = sysctlbyname("hw.optional.x86_64", &value, &length, NULL, 0); //x86 specific
+	if(error != 0)
+		error = sysctlbyname("hw.optional.64bitops", &value, &length, NULL, 0); //PPC specific
+	
+	return (error == 0) ? @"64" : @"32";
+}
 @end
diff -u -r -x .svn -x .DS_Store Sparkle/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj Sparkle_/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj
--- Sparkle/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle_/Extras/Source Code/Sparkle.xcodeproj/project.pbxproj	2015-10-21 13:54:56.000000000 -0400
@@ -802,7 +802,7 @@
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = "/usr/bin/env ruby";
-			shellScript = "resources = \"#{ENV[\"BUILT_PRODUCTS_DIR\"]}/#{ENV[\"WRAPPER_NAME\"]}/Resources\"\n`ln -s \"#{resources}/fr.lproj\" \"#{resources}/fr_CA.lproj\"`";
+			shellScript = "resources = \"#{ENV[\"BUILT_PRODUCTS_DIR\"]}/#{ENV[\"WRAPPER_NAME\"]}/Resources\"\n`ln -s \"fr.lproj\" \"#{resources}/fr_CA.lproj\"`";
 		};
 /* End PBXShellScriptBuildPhase section */
 
