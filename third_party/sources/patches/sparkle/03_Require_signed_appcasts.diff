--- Sparkle/Sparkle/SUAppcast.h	2016-08-07 06:39:07.000000000 -0400
+++ Sparkle_/Sparkle/SUAppcast.h	2017-01-11 06:06:47.000000000 -0500
@@ -21,6 +21,7 @@
 
 @property (copy) NSString *userAgentString;
 @property (copy) NSDictionary *httpHeaders;
+@property (copy) NSString *publicDSAKey;
 
 - (void)fetchAppcastFromURL:(NSURL *)url completionBlock:(void (^)(NSError *))err;
 - (SUAppcast *)copyWithoutDeltaUpdates;
--- Sparkle/Sparkle/SUAppcast.m	2016-08-07 06:39:07.000000000 -0400
+++ Sparkle_/Sparkle/SUAppcast.m	2017-01-11 06:06:38.000000000 -0500
@@ -14,6 +14,7 @@
 #import "SUAppcast.h"
 #import "SUConstants.h"
 #import "SULog.h"
+#import "SUDSAVerifier.h"
 
 @interface NSXMLElement (SUAppcastExtensions)
 @property (readonly, copy) NSDictionary *attributesAsDictionary;
@@ -56,6 +57,7 @@
 @synthesize httpHeaders;
 @synthesize download;
 @synthesize items;
+@synthesize publicDSAKey;
 
 - (void)fetchAppcastFromURL:(NSURL *)url completionBlock:(void (^)(NSError *))block
 {
@@ -96,6 +98,15 @@
 - (void)downloadDidFinish:(NSURLDownload *)__unused aDownload
 {
     NSError *error = nil;
+
+    NSString * pkeyString = self.publicDSAKey;
+    if (   pkeyString
+        && (![SUDSAVerifier validateSignedXMLFileAtPath:self.downloadFilename fromItemName:@"appcast" withPublicDSAKey:pkeyString]) ) {
+        error = [NSError errorWithDomain:SUSparkleErrorDomain code:SUAppcastParseError userInfo:[NSDictionary dictionaryWithObjectsAndKeys:SULocalizedString(@"The update feed was not properly signed.", nil), NSLocalizedDescriptionKey, nil]];
+        [self reportError: error];
+        return;
+    }
+
     NSArray *appcastItems = [self parseAppcastItemsFromXMLFile:[NSURL fileURLWithPath:self.downloadFilename] error:&error];
 
     [[NSFileManager defaultManager] removeItemAtPath:self.downloadFilename error:nil];
diff -u -r Sparkle/Sparkle/SUBasicUpdateDriver.m Sparkle_/Sparkle/SUBasicUpdateDriver.m
--- Sparkle/Sparkle/SUBasicUpdateDriver.m	2016-09-04 08:25:24.000000000 -0400
+++ Sparkle_/Sparkle/SUBasicUpdateDriver.m	2017-01-11 06:22:49.000000000 -0500
@@ -56,6 +56,11 @@
 
     [appcast setUserAgentString:[self.updater userAgentString]];
     [appcast setHttpHeaders:[self.updater httpHeaders]];
+    if (   [aHost boolForInfoDictionaryKey: @"TBAppcastRequiresDSASignature"]  ) {
+	    [appcast setPublicDSAKey: aHost.publicDSAKey];
+	} else {
+	    [appcast setPublicDSAKey: nil];
+	}
     [appcast fetchAppcastFromURL:URL completionBlock:^(NSError *error) {
         if (error) {
             [self abortUpdateWithError:error];
diff -u -r Sparkle/Sparkle/SUDSAVerifier.h Sparkle_/Sparkle/SUDSAVerifier.h
--- Sparkle/Sparkle/SUDSAVerifier.h	2016-07-26 05:39:44.000000000 -0400
+++ Sparkle_/Sparkle/SUDSAVerifier.h	2016-09-07 10:00:25.000000000 -0400
@@ -27,6 +27,8 @@
 
 + (BOOL)validatePath:(NSString *)path withEncodedDSASignature:(NSString *)encodedSignature withPublicDSAKey:(NSString *)pkeyString;
 
++ (BOOL)validateSignedXMLFileAtPath:(NSString *)path fromItemName:(NSString *)itemName withPublicDSAKey:(NSString *)pkeyString;
+
 - (instancetype)initWithPublicKeyData:(NSData *)data;
 
 - (BOOL)verifyFileAtPath:(NSString *)path signature:(NSData *)signature;
diff -u -r Sparkle/Sparkle/SUDSAVerifier.m Sparkle_/Sparkle/SUDSAVerifier.m
--- Sparkle/Sparkle/SUDSAVerifier.m	2016-07-26 05:39:44.000000000 -0400
+++ Sparkle_/Sparkle/SUDSAVerifier.m	2017-01-10 17:04:26.000000000 -0500
@@ -42,6 +42,212 @@
     return [verifier verifyFileAtPath:path signature:signature];
 }
 
++ (BOOL)validateData:(NSData *)data withEncodedDSASignature:(NSString *)encodedSignature withPublicDSAKey:(NSString *)pkeyString
+{
+    if (  !data || !encodedSignature || !pkeyString  ) {
+        SULog(@"validateData:withEncodedDSASignature:withPublicDSAKey: data, encodedSignature, and/or publicDSAKey == nil");
+        return NO;
+    }
+    
+    SUDSAVerifier *verifier = [[self alloc] initWithPublicKeyData:[pkeyString dataUsingEncoding:NSUTF8StringEncoding]];
+    if (  !verifier  ) {
+        SULog(@"validateData:withEncodedDSASignature:withPublicDSAKey: Unable to obtain verifier with publicDSAKey '%@'",pkeyString);
+        return NO;
+    }
+    
+    NSString *strippedSignature = [encodedSignature stringByTrimmingCharactersInSet:NSCharacterSet.whitespaceAndNewlineCharacterSet];
+    NSData *signature = [[NSData alloc] initWithBase64Encoding:strippedSignature];
+    
+    NSInputStream *dataInputStream = [NSInputStream inputStreamWithData:data];
+    return [verifier verifyStream:dataInputStream signature:signature];
+}
+
++ (BOOL) isItem: (NSString *) itemName before: (NSString *) beforeDateTime orAfter: (NSString *) afterDateTime
+{
+	// Returns TRUE if the current date is before or after the specified date/times
+	// Each date/time should be a string of the form YYYY-MM-DDTHH:MM:SS
+	
+	// Get current date and time
+	NSDateFormatter * formatter = [[NSDateFormatter alloc] init];
+	[formatter setDateFormat: @"yyyy-MM-dd'T'HH:mm:ss"];
+	[formatter setTimeZone: [NSTimeZone timeZoneForSecondsFromGMT: 0]];
+	[formatter setLocale:[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"]];
+	NSString * currentDateTime = [formatter stringFromDate: [NSDate date]];
+	
+	if (  NSOrderedDescending == [beforeDateTime compare: currentDateTime]  ) {
+		SULog(@"Failed to verify %@ signature; signature not yet valid; it will be valid starting %@ (now = %@)", itemName, beforeDateTime, currentDateTime);
+		return YES;
+	}
+	if (  NSOrderedAscending == [afterDateTime compare: currentDateTime]  ) {
+		SULog(@"Failed to verify %@ signature; signature no longer valid; it was valid until %@ (now = %@)", itemName, afterDateTime, currentDateTime);
+		return YES;
+	}
+
+	return NO;
+}
+
++ (void)dumpArray: (NSArray *) array
+{
+	NSMutableString * message = [[NSMutableString alloc] initWithCapacity: 1000];
+	[message appendString: @"Fields found in signature and validation comments:\n"];
+	unsigned i;
+	for (  i=0; i<[array count]; i++  ) {
+		NSString * oneField = [NSString stringWithFormat: @"     [%d]: '%@'\n", i, [array objectAtIndex: i]];
+		[message appendString: oneField];
+	}
+	
+	SULog(@"%@", message);
+}
+
+
++ (BOOL)validateSignedXMLFileAtPath:(NSString *)path fromItemName:(NSString *)itemName withPublicDSAKey:(NSString *)pkeyString
+{
+/* Verifies that the contents of an XML/HTML file were signed using a digital signature in an XML/HTML comment prepended to the contents.
+
+   "path" is the path to the file.
+   "itemName" is a name describing the data (examples: "appcast", "update notes")
+   "publicDSAKey" is used to verify the signature.
+
+   The file must start with two fixed-length XML/HTML comments:
+		
+		The "signature comment" contains a digital signature of the remainder of the file.
+			The comment 103 bytes long and is of the form:
+				<!-- Tunnelblick_DSA_Signature v2 SIGNATURE -->\n
+			where SIGNATURE is a 64-character base-64 encoded digital signature created by the Sparkle-provided "sign_update.rb"
+			      command using a private DSA key.
+			
+		The "validation comment" contains information about the validity of the file.
+			The comment is of the form:
+				<!--LENGTH BEFORE_DATE AFTER_DATE -->\n
+			where LENGTH (7 digits with leading zeroes) is the length in bytes of the remainder of the file after the validation comment and its terminating LF;
+			and BEFORE_DATE (YYYY-MM-DDTHH:MM:SS) is the date before which the signature is NOT valid;
+			and AFTER_DATE (YYYY-MM-DDTHH:MM:SS)  is the date after which the signature is NOT valid.
+
+		In both comments, there must be exactly one space character between each part of the comment.
+
+   Example:
+   
+		<!-- Tunnelblick_Signature v2 MC4CFQCt61RNh0xUU9AtTI/7yoXqDURxQAIVAJGrfk+pD1iRy8ggGtV2meEK6qxD ->
+		<!-- 0000833 2017-01-15T22:59:02 2017-03-15T22:59:02 ->
+		
+   	
+   Notes:
+     1. The validity comment and LF is prepended to the file, the signature is calculated on the result, and then the signature
+		comment and LF is prepended to the file, so the signature protects the validity information.
+     2. The comments are plain (7-bit) ASCII, but the remainder of the file can have any encoding.
+ */
+
+// Lengths of fields in the comments are fixed as follows (all must fit in an unsigned integer:
+#define TB_SIGNATURE_COMMENT_LENGTH       99
+#define TB_VALIDATION_COMMENT_LENGTH      57
+#define TB_NUMBER_OF_PARSED_FIELDS         9
+#define TB_ENCODED_SIGNATURE_LENGTH       64
+#define TB_LENGTH_LENGTH                   7
+//  if  TB_LENGTH_LENGTH changes, the format string used to create payloadLengthString must be modified correspondingly 
+#define TB_DATE_LENGTH                    19
+#define TB_MAX_FILE_SIZE		     9999999
+
+    if (  !path || !itemName || !pkeyString  ) {
+        SULog(@"path, itemName, and/or PublicDSAKey == nil");
+        return NO;
+    }
+    
+    NSDictionary *infoDict = [[NSFileManager defaultManager] attributesOfItemAtPath:path error:nil];
+    unsigned long long fileSize = [infoDict fileSize];
+    if (   (fileSize <= TB_SIGNATURE_COMMENT_LENGTH + TB_VALIDATION_COMMENT_LENGTH)
+        || fileSize > TB_MAX_FILE_SIZE  ) {
+        SULog(@"%@ is unreadable, too short, or too long at %@", itemName, path);
+        return NO;
+    }
+
+    NSData * data = [NSData dataWithContentsOfFile: path];
+    if (  ! data  ) {
+        SULog(@"Cannot load data for %@ from %@", itemName, path);
+        return NO;
+    }
+    
+	// Isolate the comments and "parse" them into fields separated by a single space character
+	NSString * comments = [[NSString alloc] initWithBytes: [data bytes] length: (TB_SIGNATURE_COMMENT_LENGTH + TB_VALIDATION_COMMENT_LENGTH) encoding: NSASCIIStringEncoding];
+	if (  ! comments  ) {
+			SULog(@"Failed to verify %@ signature; the signature and validation comments are not 7-bit ASCII", itemName);
+		return NO;
+	}
+	NSArray * parsed = [comments componentsSeparatedByString: @" "];
+	if (  [parsed count] != TB_NUMBER_OF_PARSED_FIELDS  ) {
+		SULog(@"Failed to verify %@ signature; the signature and validation comments had %lu fields; they should have %u fields", itemName, (unsigned long)[parsed count], TB_NUMBER_OF_PARSED_FIELDS);
+		[SUDSAVerifier dumpArray: parsed];
+		return NO;
+	}
+	
+	// Check the fixed components of the comments
+	if (   [[parsed objectAtIndex: 0] isNotEqualTo: @"<!--"]
+		|| [[parsed objectAtIndex: 1] isNotEqualTo: @"Tunnelblick_Signature"]
+		|| [[parsed objectAtIndex: 2] isNotEqualTo: @"v2"]
+		|| [[parsed objectAtIndex: 4] isNotEqualTo: @"-->\n<!--"]
+		|| [[parsed objectAtIndex: 8] isNotEqualTo: @"-->\n"]
+		) {
+			SULog(@"Failed to verify %@ signature; one or more fixed fields were not correct", itemName);
+		[SUDSAVerifier dumpArray: parsed];
+		return NO;
+	}
+	
+	// Extract and check the variable components of the comments
+	NSString * signature  = [parsed objectAtIndex: 3];
+	NSString * length     = [parsed objectAtIndex: 5];
+	NSString * beforeDate = [parsed objectAtIndex: 6];
+	NSString * afterDate  = [parsed objectAtIndex: 7];
+	
+	if (   ([signature  length] != TB_ENCODED_SIGNATURE_LENGTH)
+		|| ([length     length] != TB_LENGTH_LENGTH)
+		|| ([beforeDate length] != TB_DATE_LENGTH)
+		|| ([afterDate  length] != TB_DATE_LENGTH)
+		) {
+		SULog(@"Failed to verify %@ signature; one or more variable fields was not the correct length", itemName);
+		[SUDSAVerifier dumpArray: parsed];
+		return NO;
+	}
+	
+	// The "payloadLength" is the length of the file before the comments were prepended to it.
+    unsigned long payloadLength = ((unsigned long)fileSize) - TB_SIGNATURE_COMMENT_LENGTH - TB_VALIDATION_COMMENT_LENGTH;
+    NSString * payloadLengthString = [NSString stringWithFormat: @"%07lu", payloadLength];
+	if (   [length isNotEqualTo: payloadLengthString]  ) {
+		SULog(@"Failed to verify %@ signature; expected payload length was '%@' but the actual payload length was '%@'; ", itemName, length, payloadLengthString);
+		return NO;
+	}
+
+	if (   [[beforeDate substringWithRange: NSMakeRange(4,  1)] isNotEqualTo: @"-"]
+		|| [[beforeDate substringWithRange: NSMakeRange(7,  1)] isNotEqualTo: @"-"]
+		|| [[beforeDate substringWithRange: NSMakeRange(10, 1)] isNotEqualTo: @"T"]
+		|| [[beforeDate substringWithRange: NSMakeRange(13, 1)] isNotEqualTo: @":"]
+		|| [[beforeDate substringWithRange: NSMakeRange(16, 1)] isNotEqualTo: @":"]
+		|| [[afterDate  substringWithRange: NSMakeRange(4,  1)] isNotEqualTo: @"-"]
+		|| [[afterDate  substringWithRange: NSMakeRange(7,  1)] isNotEqualTo: @"-"]
+		|| [[afterDate  substringWithRange: NSMakeRange(10, 1)] isNotEqualTo: @"T"]
+		|| [[afterDate  substringWithRange: NSMakeRange(13, 1)] isNotEqualTo: @":"]
+		|| [[afterDate  substringWithRange: NSMakeRange(16, 1)] isNotEqualTo: @":"]  ) {
+		SULog(@"Failed to verify %@ signature; one or more date fields was not formatted properly (must be YYYY-MM-DDTHH:MM:SS)", itemName);
+		[SUDSAVerifier dumpArray: parsed];
+		return NO;
+	}
+	
+	// Verify the signature on the data
+	unsigned long signedLength = TB_VALIDATION_COMMENT_LENGTH + payloadLength;
+	const void * signedStart = (const void *)(((const char *)[data bytes]) + TB_SIGNATURE_COMMENT_LENGTH);
+	NSData * signedContents = [NSData dataWithBytes: signedStart length: signedLength];
+    BOOL itemSignatureIsGood = [SUDSAVerifier validateData: signedContents withEncodedDSASignature: signature withPublicDSAKey: pkeyString];
+    if (  ! itemSignatureIsGood  ) {
+		SULog(@"Failed to verify %@ signature", itemName);
+		return NO;
+	}
+
+	if (  [SUDSAVerifier isItem: itemName before: beforeDate orAfter: afterDate]  ) {
+		return NO;	// (Error message has been logged)
+	}
+	
+	SULog(@"Verified %@ signature", itemName);
+	return YES;
+}
+
 - (instancetype)initWithPublicKeyData:(NSData *)data
 {
     self = [super init];
